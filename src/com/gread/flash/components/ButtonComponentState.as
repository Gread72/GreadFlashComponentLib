package com.gread.flash.components{	/*		Class ButtonComponentState - Button Component		Note: This class is used to build ButtonComponent - states - up, down, over		- You can pass an image and/or text with format		- You can pass a text format or use the default		- width and height is used for non-image ... adding image provides dimensions, width and height are not used presently				example:		new ButtonComponentState(0xffffff, "MyButton", new TextFormat("Verdana",12), 0, 0, upImage); // upimage is a Sprite		new ButtonComponentState(0xffffff, "MyButton", new TextFormat("Verdana",12), 200, 10); // text with oval graphic background - color property set this background color	*/	   import flash.display.Bitmap;   import flash.display.BitmapData;   import flash.display.CapsStyle;   import flash.display.JointStyle;   import flash.display.Loader;   import flash.display.Shape;   import flash.display.Sprite;   import flash.events.Event;   import flash.geom.Matrix;   import flash.net.URLRequest;   import flash.text.TextField;   import flash.text.TextFieldAutoSize;   import flash.text.TextFormat;   public class ButtonComponentState extends Sprite   {	  protected var _color:uint;	  protected var _labelText:String;	  protected var _width:Number;	  protected var _height:Number;	  protected var _label:TextField;	  protected var _background:Shape;	  protected var _textFormat:TextFormat;	  protected var _loader:Loader;      	  public function ButtonComponentState(color:uint = 0xffffff, labelText:String = "button", textFormat:TextFormat = null, 										   width:Number=0, height:Number=0, image:Sprite = null) {         super();		 		 if(!textFormat){		 	_textFormat = new TextFormat("Verdana",12);		 }else{			 _textFormat = textFormat;		 }		          _color = color;         		 _labelText = labelText;         		 _width = width;         		 _height = height;		 		 if(image != null){			 createLabel();			 			 /*			 var bitmapData:BitmapData = new BitmapData(image.width, image.height, false);			 bitmapData.draw(image, new Matrix());			 var bitmap:Bitmap = new Bitmap(bitmapData);			 addChild(bitmap);			 */			 			 addChild(image);			 addChild(_label);			 			 centerLabel();			 			 		 }else{			 createSimpleButton();		 }      }           private function init() : void {		       }	  	  public function createSimpleButton():void{		  createLabel();		  createBackground();		  addChild(_background);		  addChild(_label);		  		  centerLabel();	  }	  	  public function setText(textValue:String):void{		  _labelText = textValue;		  _label.text = _labelText;		  _label.setTextFormat(_textFormat);	  }	        private function onLoadComplete( evt:Event ) : void {         /*		 if( _width < _label.textWidth ){            _width = _label.textWidth + 10;         } 		          if( _height < _label.textHeight){            _height = _label.textHeight;         } 		 */		          var bitmapData:BitmapData = new BitmapData(_loader.content.width, _loader.content.height, false);         bitmapData.draw(_loader.content, new Matrix());         var bitmap:Bitmap = new Bitmap(bitmapData);         addChild(bitmap);         		 addChild(_loader.content);		 addChild(_label);		 		 centerLabel();      }	        private function createBackground() : void {                 if( _width < _label.textWidth){            _width = _label.textWidth + 10;         }		          if( _height < _label.textWidth){         	_height = 18;         }		          _background = new Shape();         _background.graphics.beginFill( _color );         _background.graphics.lineStyle( 0.5, 0, 1, true, "normal", flash.display.CapsStyle.ROUND, flash.display.JointStyle.ROUND);         _background.graphics.drawRoundRect(0, 0, _width, _height, 24);              }      private function createLabel() : void {         _label = new TextField();         		 _label.text = _labelText;		 		_label.autoSize = TextFieldAutoSize.CENTER;                  if( _height > 0 ){         	_label.height = _height;         }		 		 _label.setTextFormat(_textFormat);      }	  	  private function centerLabel():void{		  _label.x = _width / 2 - _label.width / 2;		  var heightValue:Number;		  if(_label.height < _textFormat.size){			  heightValue = Number(_textFormat.size);		  }else{			   heightValue = _label.height;		  }		  _label.y = _height / 2 - Number(heightValue) / 2; //		  //trace("_textFormat.size " + _textFormat.size);		  //trace("_label.height " + _label.height);	  }   }}