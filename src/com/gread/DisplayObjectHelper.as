package com.gread {	/*	 * Class DisplayObjectHelper - Utility Class for DisplayObject	 *	 * Notes: 	 * - This utility removes child element(s), Clone Sprite, Print, Open as Image, Load Image, Button States	*/	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.display.Loader;	import org.osflash.signals.Signal;	import flash.geom.Matrix;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.printing.PrintJob;	import flash.geom.Rectangle;	import com.adobe.images.JPGEncoder;	import flash.display.MovieClip;	import flash.utils.ByteArray;	import flash.net.URLRequestHeader;	import flash.net.URLRequestMethod;	import flash.net.navigateToURL;		public class DisplayObjectHelper{				public static var LOAD_IMAGE_COMPLETE:String = "LOAD_IMAGE_COMPLETE";				public static function removeChildElement(parent:DisplayObjectContainer, childReference:DisplayObject):void{			for(var i:Number = 0; i < parent.numChildren; i++){				if(parent.getChildAt( i ) == childReference){					parent.removeChildAt( i );				}			}		}				public static function removeAllChildrenElements(parent:DisplayObjectContainer):void{			if(parent){				for(var i:Number = parent.numChildren; i >= parent.numChildren; i--){					// if num of childern zero - done					if(parent.numChildren == 0){						return;					}else{						parent.removeChildAt( i - 1 );					}				}			}		}				public static function cloneSprite( target:Sprite, scaleXY:Number = 1):Sprite {			var clone:Sprite = new Sprite();						var bitmapData:BitmapData = new BitmapData(target.width, target.height);			var matrix:Matrix = new Matrix();						matrix.scale(scaleXY,scaleXY);			bitmapData.draw(target,matrix);						var bitmap:Bitmap = new Bitmap(bitmapData);						clone.addChild(bitmap);						return clone;		}				public static function printSprite(target:Sprite):void{			var printJob:PrintJob = new PrintJob();			if(printJob.start())			{				try{					printJob.addPage(target, new Rectangle(0,0,printJob.paperWidth, target.height));				}				catch(e:Error)				{					trace("can't print!")				}				printJob.send();			}		}						public static function saveImageToBrowser(target:Sprite, srvScript:String):void{						//Note: must have server script to request back the image - ex. "srv_script/saveJPGToDesktop.php?name=image.jpg"			if(srvScript != ""){				var jpgSource:BitmapData = new BitmapData (target.width, target.height);				jpgSource.draw(target);								var jpgEncoder:JPGEncoder = new JPGEncoder(85);				var jpgStream:ByteArray = jpgEncoder.encode(jpgSource);								var header:URLRequestHeader = new URLRequestHeader("Content-type", "application/octet-stream");				var jpgURLRequest:URLRequest = new URLRequest(srvScript);				jpgURLRequest.requestHeaders.push(header);				jpgURLRequest.method = URLRequestMethod.POST;				jpgURLRequest.data = jpgStream;				navigateToURL(jpgURLRequest, "_blank");			}		}									   				public static function loadImage(urlPath:String):Sprite{						var resultIMG:Sprite = new Sprite();			var loader:Loader = new Loader();			loader.load(new URLRequest(urlPath));						loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(evt:Event):void{				resultIMG.addChild( DisplayObject(evt.target.content) );				resultIMG.dispatchEvent(new Event(LOAD_IMAGE_COMPLETE) );			})						return resultIMG;					}				public static function loadButtonStateImages(upStateImagePath:String, downStateImagePath:String, overStateImagePath:String):Signal{			var loadSignal:Signal = new Signal();						var upStateImage:Sprite = DisplayObjectHelper.loadImage(upStateImagePath); //"assets/img/st_memorybook.jpg"			var downStateImage:Sprite = DisplayObjectHelper.loadImage(downStateImagePath); //"assets/img/st_puppals.jpg"			var overStateImage:Sprite = DisplayObjectHelper.loadImage(overStateImagePath); //"assets/img/st_scrub.jpg"						var upStateImageLoaded:Boolean = false;			var downStateImageLoaded:Boolean = false;			var overStateImageLoaded:Boolean = false;						upStateImage.addEventListener(DisplayObjectHelper.LOAD_IMAGE_COMPLETE, function():void{				upStateImageLoaded = true;				trace("upStateImage loaded");								if(upStateImageLoaded && downStateImageLoaded && overStateImageLoaded){					loadSignal.dispatch({"upStateIMG" : upStateImage, "downStateIMG" : downStateImage, "overStateIMG" : overStateImage});				}							});						downStateImage.addEventListener(DisplayObjectHelper.LOAD_IMAGE_COMPLETE, function():void{				downStateImageLoaded = true;				trace("downStateImage loaded");								if(upStateImageLoaded && downStateImageLoaded && overStateImageLoaded){					loadSignal.dispatch({"upStateIMG" : upStateImage, "downStateIMG" : downStateImage, "overStateIMG" : overStateImage});				}			});						overStateImage.addEventListener(DisplayObjectHelper.LOAD_IMAGE_COMPLETE, function():void{				overStateImageLoaded = true;				trace("overStateImage loaded");								if(upStateImageLoaded && downStateImageLoaded && overStateImageLoaded){					loadSignal.dispatch({"upStateIMG" : upStateImage, "downStateIMG" : downStateImage, "overStateIMG" : overStateImage});				}				  			});						return loadSignal;		}	}}